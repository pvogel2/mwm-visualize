//http://blog.ivank.net/force-based-graph-drawing-in-as3.html
function onEF(e:Event):void
{
   for(i=0; i < n; i++) // loop through vertices
   {
      var v:Vertex = vertices[i];
      var u:Vertex;
      v.net_force.x = v.net_force.y = 0;
      for(j=0; j < n; j++) // loop through other vertices
      {
         if(i==j)continue;
         u = vertices[j]; 
         // squared distance between "u" and "v" in 2D space
         var rsq:Number = ((v.x-u.x)*(v.x-u.x)+(v.y-u.y)*(v.y-u.y));
         // counting the repulsion between two vertices 
         v.net_force.x += 200 * (v.x-u.x) /rsq;
         v.net_force.y += 200 * (v.y-u.y) /rsq;
      }
      for(j=0; j < n; j++) // loop through edges
      {
         if(!edges[i][j])continue;
         u = vertices[j];
         // countin the attraction
         v.net_force.x += 0.06*(u.x - v.x);
         v.net_force.y += 0.06*(u.y - v.y);
      }
      // counting the velocity (with damping 0.85)
      v.velocity.x = (v.velocity.x + v.net_force.x)*0.85; 
      v.velocity.y = (v.velocity.y + v.net_force.y)*0.85; 
   }
   for(i=0; i < n; i++) // set new positions
   {
      v = vertices[i];
      if(v.isDragged){ v.x = mouseX; v.y = mouseY; }
      else { v.x += v.velocity.x; v.y += v.velocity.y; }
   }
   // drawing edges
   graphics.clear();
   graphics.lineStyle(3, 0x333333);
   for(i=0; i < n; i++)
   {
      for(j=0; j < n; j++)
      {
         if(!edges[i][j]) continue;
         graphics.moveTo(vertices[i].x, vertices[i].y);
         graphics.lineTo(vertices[j].x, vertices[j].y);
      }
   }
}